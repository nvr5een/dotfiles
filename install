#!/usr/bin/env bash

# Installs dotfiles and creates associated directories.
# WARNING: This script overwrites things!

src=~/projects/dotfiles
timestamp=$(date +%Y-%m-%d_%H:%M:%S)
log_file=/tmp/dotfiles.log

bin_dst=~/.local/bin
mpv_dst=~/.config/mpv
nvim_dst=~/.config/nvim
nvim_backup=~/.local/share/nvim
vifm_dst=~/.config/vifm
zsh_dst=~/.zsh

log_header() { #{{{
echo "
-------------------
$timestamp
-------------------"
} >> "$log_file" #}}}

delete_all() { #{{{
  local files=("$mpv_dst"
               "$nvim_dst"
               "$vifm_dst"
               "$zsh_dst"
               ~/.cache/zsh
               ~/.tmux.conf
               ~/.gitconfig
               ~/.zcompdump
               ~/.zshrc)
  log_header
  [[ -d $nvim_dst/pack ]] || rm -rf "$nvim_dst"/pack
  for i in "${files[@]}"; do
    [[ -e "$i" ]] || continue
    rm -rfv "$i" >> "$log_file"
  done
  # User scripts
  read -p "Delete '$bin_dst'? (y/n)" -n 1 -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rfv "$bin_dst" >> "$log_file"
  fi
  # Neovim backups
  echo ""
  read -p "Delete '$nvim_backup'? (y/n)" -n 1 -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rfv "$nvim_backup" >> "$log_file"
  fi
  echo ""
  echo "Deleted dotfiles and associated directories. See '$log_file' for details."
} #}}}

focal() { #{{{
  sudo apt install -y neovim tmux vifm zsh
  echo ""
  read -p "Install desktop packages'? (y/n)" -n 1 -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo ""
    sudo apt install -y mpv
  fi
  echo ""
  main
} #}}}

full() { #{{{
  if [[ "$OSTYPE" = "linux-gnu"* ]]; then
    if cat /etc/os-release | grep -q 'Focal'; then
      focal
    else
      read -p "OS not supported. Continue installing dotfiles? (y/n)" -n 1 -r
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo ""
        main
      fi
    fi
  fi
} #}}}

install_mpv_configs() { #{{{
  if type -p mpv &>/dev/null; then
    mkdir -p "$mpv_dst"
    for file in "$src"/mpv/*; do
      cp -fv "$file" "$mpv_dst" >> "$log_file"
    done
  fi
} #}}}

install_neovim_configs() { #{{{
  if type -p nvim &>/dev/null; then
    mkdir -p "$nvim_dst"/{colors,minisnip,syntax}
    mkdir -p "$nvim_backup"/{backup,swap,undo}
    ln -sfv "$src"/nvim/init.vim "$nvim_dst" >> "$log_file" 2>&1
    # colors
    for file in "$src"/nvim/colors/*; do
      cp -fv "$file" "$nvim_dst"/colors >> "$log_file"
    done
    # minisnip
    for file in "$src"/nvim/minisnip/*; do
      cp -fv "$file" "$nvim_dst"/minisnip >> "$log_file"
    done
    # syntax
    for file in "$src"/nvim/syntax/*; do
      cp -fv "$file" "$nvim_dst"/syntax >> "$log_file"
    done
  fi
} #}}}

install_vifm_configs() { #{{{
  if type -p vifm &>/dev/null; then
    mkdir -p "$vifm_dst"/colors
    # colors
    cp -fv "$src"/vifm/colors/* "$vifm_dst"/colors >> "$log_file"
    # vifmrc
    if [[ "$OSTYPE" = "linux-gnu"* ]]; then
      ln -sfv "$src"/vifm/linux.vifmrc "$vifm_dst"/vifmrc >> "$log_file" 2>&1
    elif [[ "$OSTYPE" = "darwin"* ]]; then
      ln -sfv "$src"/vifm/macos.vifmrc "$vifm_dst"/vifmrc >> "$log_file" 2>&1
    fi
  fi
} #}}}

install_user_scripts() { #{{{
  mkdir -p "$bin_dst"
  for file in "$src"/bin/*; do
    cp -fv "$file" "$bin_dst" >> "$log_file"
  done
  chmod 700 "$bin_dst"/*
} #}}}

install_git_configs() { #{{{
  cp -fv "$src"/gitconfig ~/.gitconfig >> "$log_file"
} #}}}

install_tmux_configs() { #{{{
  if type -p tmux &>/dev/null; then
    ln -sfv "$src"/tmux.conf ~/.tmux.conf >> "$log_file" 2>&1
  fi
} #}}}

install_zsh_configs() { #{{{
  if type -p zsh &>/dev/null; then
    ln -sfv "$src"/zshrc ~/.zshrc >> "$log_file" 2>&1
    mkdir -p "$zsh_dst"/completion
    if [[ -z "$(ls -A $zsh_dst/completion)" ]]; then
      curl -o "$zsh_dst"/completion/_docker https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/docker/_docker >> "$log_file" 2>&1
      curl -o "$zsh_dst"/completion/_docker-compose https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/docker-compose/_docker-compose >> "$log_file" 2>&1
      curl -o "$zsh_dst"/completion/_lxc https://raw.githubusercontent.com/endaaman/lxd-completion-zsh/master/_lxc >> "$log_file" 2>&1
      curl -o "$zsh_dst"/completion/_lxd https://raw.githubusercontent.com/endaaman/lxd-completion-zsh/master/_lxd >> "$log_file" 2>&1
    fi
  fi
} #}}}

main() { #{{{
  log_header
  install_mpv_configs
  install_neovim_configs
  install_vifm_configs
  install_user_scripts
  install_git_configs
  install_tmux_configs
  install_zsh_configs
  echo "Installed dotfiles and associated directories. See '$log_file' for details."
} #}}}

while [[ ! $# -eq 0 ]]; do
  case "$1" in
    --delete | -d)
      delete_all
      exit
      ;;
    --full | -f)
      full
      exit
      ;;
  esac
  shift
done

main "$@"
