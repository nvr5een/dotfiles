#!/usr/bin/env bash

src=~/.config/dotfiles
timestamp=$(date +%Y-%m-%d_%H:%M:%S)
log_file=/tmp/dotfiles.log

bin_dst=~/.local/bin
cmus_dst=~/.config/cmus
mpv_dst=~/.config/mpv
newsboat_dst=~/.config/newsboat
neovim_dst=~/.config/nvim
neovim_backup=~/.local/share/nvim
vifm_dst=~/.config/vifm
zsh_dst=~/.zsh

log_header() { #{{{
echo "
-------------------
$timestamp
-------------------"
} >> "$log_file" #}}}

delete_all() { #{{{
  local files=("$mpv_dst"
               "$newsboat_dst"
               "$neovim_dst"
               "$vifm_dst"
               "$zsh_dst"
               ~/.cache/zsh
               ~/.tmux.conf
               ~/.gitconfig
               ~/.zcompdump
               ~/.zshrc)
  log_header
  [[ -d $neovim_dst/pack ]] || rm -rf "$neovim_dst"/pack
  for i in "${files[@]}"; do
    [[ -e "$i" ]] || continue
    rm -rfv "$i" >> "$log_file"
  done
  # User scripts
  read -p "Delete '$bin_dst'? (y/n)" -n 1 -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rfv "$bin_dst" >> "$log_file"
  fi
  # Neovim backups
  echo ""
  read -p "Delete '$neovim_backup'? (y/n)" -n 1 -r
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    rm -rfv "$neovim_backup" >> "$log_file"
  fi
  echo ""
  echo "Deleted dotfiles and associated directories. See '$log_file' for details."
} #}}}

install_cmus_configs() { #{{{
  if type -p cmus &>/dev/null; then
    mkdir -p "$cmus_dst"
    if [[ "$OSTYPE" = "linux-gnu"* ]]; then
      cp -fv "$src"/cmus/linux.rc "$cmus_dst"/rc >> "$log_file" 2>&1
    elif [[ "$OSTYPE" = "darwin"* ]]; then
      cp -fv "$src"/cmus/macos.rc "$cmus_dst"/rc >> "$log_file" 2>&1
    fi
  fi
} #}}}

install_mpv_configs() { #{{{
  if type -p mpv &>/dev/null; then
    mkdir -p "$mpv_dst"
    for file in "$src"/mpv/*; do
      cp -fv "$file" "$mpv_dst" >> "$log_file"
    done
  fi
} #}}}

install_neovim_configs() { #{{{
  if type -p nvim &>/dev/null; then
    mkdir -p "$neovim_dst"/{colors,minisnip,syntax}
    mkdir -p "$neovim_backup"/{backup,swap,undo}
    ln -sfv "$src"/nvim/init.vim "$neovim_dst" >> "$log_file" 2>&1
    # colors
    for file in "$src"/nvim/colors/*; do
      cp -fv "$file" "$neovim_dst"/colors >> "$log_file"
    done
    # minisnip
    for file in "$src"/nvim/minisnip/*; do
      cp -fv "$file" "$neovim_dst"/minisnip >> "$log_file"
    done
    # syntax
    for file in "$src"/nvim/syntax/*; do
      cp -fv "$file" "$neovim_dst"/syntax >> "$log_file"
    done
  fi
} #}}}

install_newsboat_configs() { #{{{
  if type -p newsboat &>/dev/null; then
    mkdir -p "$newsboat_dst"
    for file in "$src"/newsboat/*; do
      cp -fv "$file" "$newsboat_dst" >> "$log_file"
    done
  fi
} #}}}

install_vifm_configs() { #{{{
  if type -p vifm &>/dev/null; then
    mkdir -p "$vifm_dst"/colors
    # colors
    cp -fv "$src"/vifm/colors/* "$vifm_dst"/colors >> "$log_file"
    # vifmrc
    if [[ "$OSTYPE" = "linux-gnu"* ]]; then
      ln -sfv "$src"/vifm/linux.vifmrc "$vifm_dst"/vifmrc >> "$log_file" 2>&1
    elif [[ "$OSTYPE" = "darwin"* ]]; then
      ln -sfv "$src"/vifm/macos.vifmrc "$vifm_dst"/vifmrc >> "$log_file" 2>&1
    fi
  fi
} #}}}

install_user_scripts() { #{{{
  mkdir -p "$bin_dst"
  for file in "$src"/bin/*; do
    cp -fv "$file" "$bin_dst" >> "$log_file"
  done
  chmod 700 "$bin_dst"/*
} #}}}

install_git_configs() { #{{{
  cp -fv "$src"/gitconfig ~/.gitconfig >> "$log_file"
  chmod 600 ~/.gitconfig
} #}}}

install_tmux_configs() { #{{{
  if type -p tmux &>/dev/null; then
    ln -sfv "$src"/tmux.conf ~/.tmux.conf >> "$log_file" 2>&1
  fi
} #}}}

install_zsh_configs() { #{{{
  if type -p zsh &>/dev/null; then
    ln -sfv "$src"/zshrc ~/.zshrc >> "$log_file" 2>&1
    mkdir -p "$zsh_dst"/completion
    if [[ -z "$(ls -A $zsh_dst/completion)" ]]; then
      curl -o "$zsh_dst"/completion/_docker https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/docker/_docker >> "$log_file" 2>&1
      curl -o "$zsh_dst"/completion/_docker-compose https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/docker-compose/_docker-compose >> "$log_file" 2>&1
      curl -o "$zsh_dst"/completion/_lxc https://raw.githubusercontent.com/endaaman/lxd-completion-zsh/master/_lxc >> "$log_file" 2>&1
      curl -o "$zsh_dst"/completion/_lxd https://raw.githubusercontent.com/endaaman/lxd-completion-zsh/master/_lxd >> "$log_file" 2>&1
    fi
  fi
} #}}}

main() { #{{{
  log_header
  install_cmus_configs
  install_mpv_configs
  install_neovim_configs
  install_newsboat_configs
  install_vifm_configs
  install_user_scripts
  install_git_configs
  install_tmux_configs
  install_zsh_configs
  echo "Installed dotfiles and associated directories. See '$log_file' for details."
} #}}}

while [[ ! $# -eq 0 ]]; do
  case "$1" in
    --delete | -d)
      delete_all
      exit
      ;;
  esac
  shift
done

if [[ -d $src ]]; then
  main "$@"
else
  echo "'$src' does not exist!"
  exit 1
fi
