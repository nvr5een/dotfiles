" ~/.vimrc
" 
"  ██▒   █▓ ██▓ ███▄ ▄███▓ ██▀███   ▄████▄
" ▓██░   █▒▓██▒▓██▒▀█▀ ██▒▓██ ▒ ██▒▒██▀ ▀█
"  ▓██  █▒░▒██▒▓██    ▓██░▓██ ░▄█ ▒▒▓█    ▄
"   ▒██ █░░░██░▒██    ▒██ ▒██▀▀█▄  ▒▓▓▄ ▄██▒
"    ▒▀█░  ░██░▒██▒   ░██▒░██▓ ▒██▒▒ ▓███▀ ░
"    ░ ▐░  ░▓  ░ ▒░   ░  ░░ ▒▓ ░▒▓░░ ░▒ ▒  ░
"    ░ ░░   ▒ ░░  ░      ░  ░▒ ░ ▒░  ░  ▒
"      ░░   ▒ ░░      ░     ░░   ░ ░
"       ░   ░         ░      ░     ░ ░
"      ░                           ░

" enable filetype detection, plugins, and indent files
filetype plugin indent on

" syntax highlighting
syntax on
colorscheme sourcerer

" ── Indentation & Tabs ───────────────────────────────────────
set autoindent                      " copy indent on newline
set expandtab                       " insert spaces instead of <Tab>
set shiftwidth=2                    " indentation width
set softtabstop=-1                  " make <Tab>/<BS> align with shiftwidth

" ── Formatting ───────────────────────────────────────────────
set formatoptions=croqlj            " respect indent, format comments, clean joins
" textwidth is left at 0; filetypes override in autocmds

" ── Search ───────────────────────────────────────────────────
set hlsearch                        " highlight matches
set ignorecase                      " case-insensitive search…
set smartcase                       " …unless pattern has uppercase
set incsearch                       " incremental search

" ── Undo / Backup ────────────────────────────────────────────
set undodir=~/.vim/undo             " persistent undo location
set undofile                        " enable persistent undo
set noswapfile                      " avoid .swp files

" Ensure undodir exists
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), 'p', 0700)
endif

" ── General Editing Behavior ─────────────────────────────────
set autoread                        " auto-reload changed files
set hidden                          " allow switching away from unsaved buffers
set backspace=indent,eol,start      " modern backspace
set modelines=0                     " disable modelines (security)
set cpoptions+=$                    " put cursor at end in some ops
set ttimeoutlen=50                  " snappy key timeout
set updatetime=100                  " faster CursorHold events (gitgutter)
set path=.,**                       " :find searches current dir + subdirs

" ── Movement & View ──────────────────────────────────────────
set number                          " absolute line numbers
set relativenumber                  " relative numbers for motions
set cursorline                      " highlight current line
set scrolloff=5                     " context lines around cursor
set display=truncate                " show '@@@' if last line truncated
set signcolumn=yes                  " keep signcolumn fixed
set virtualedit=block,onemore       " roam in block mode, one past EOL in Normal
" set virtualedit=all                 " allow cursor anywhere (all modes) — powerful but risky

" ── Wildmenu / Completion ────────────────────────────────────
set wildmenu                        " enhanced cmdline completion
set wildcharm=<C-z>                 " <C-z> triggers wildmenu from mappings
set wildoptions=pum                 " show popup menu for wildmenu
set wildignorecase                  " case-insensitive completion
set wildignore+=*.git,*.gz,*.rar,*.zip
set wildignore+=node_modules/**,dist/**,build/**,.git/**,__pycache__/**,.venv/**

" ── Statusline ───────────────────────────────────────────────
set laststatus=2                    " always show statusline
set noshowmode                      " hide --INSERT-- (we show mode ourselves)
set statusline=                     " reset statusline
set statusline+=%{PasteForStatusline()} " show [paste] when paste mode is on
set statusline+=\[%{mode()}]        " current mode
set statusline+=\ %F                " full file path
set statusline+=%m                  " [+] modified flag
set statusline+=%r                  " [RO] read-only flag
set statusline+=%=
set statusline+=\ %y                " filetype
set statusline+=\ %{&fileencoding?&fileencoding:&encoding} " encoding
set statusline+=\ \|\ %{&fileformat} " file format (unix/dos/mac)
set statusline+=\ [%p%%             " percentage through file
set statusline+=\ %l:%c]            " line:column

" ── Cursor Shape ─────────────────────────────────────────────
let &t_SI = "\e[6 q"                " Insert: beam cursor
let &t_EI = "\e[2 q"                " Normal: block cursor

" ── Mappings ─────────────────────────────────────────────────
let mapleader="\<Space>"            " <Leader> key is Space

" 'jk' to exit Insert quickly
inoremap jk <Esc>

" make Y yank to end of line (consistency with C/D)
nnoremap Y y$

" toggle to alternate buffer
nnoremap <leader><Space> :e#<CR>

" buffer list via wildmenu
nnoremap <leader>b :buffer <C-z><S-Tab>

" fuzzy-ish file open using :find + wildcharm
nnoremap <leader>f :find *

" edit vimrc
nnoremap <leader>v :e ~/.vimrc<CR>

" private notes
if !empty(glob('~/projects/private/notes'))
  nnoremap <leader>n :e ~/projects/private/notes/
endif

" replace word under cursor (whole file)
nnoremap <leader>r :%s/\<<C-r><C-w>\>//g<Left><Left>

" clear search highlight (and diffupdate)
if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

" wrap-aware down and up
nnoremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
nnoremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" cycle windows forward and backward
nnoremap <tab> <C-w>w
nnoremap <S-tab> <C-w>W

" toggle absolute/relative numbers
nnoremap <leader>i :set invnumber invrelativenumber<CR>

" join lines without moving the cursor
nnoremap J mzJ`z

" keep cursor centered while paging
nnoremap <C-d> <C-d>zz
nnoremap <C-u> <C-u>zz

" keep search hits centered and open folds
nnoremap n nzzzv
nnoremap N Nzzzv

" explicit system clipboard yanks; Vim & system stay separate
nnoremap <Leader>y "+y
vnoremap <leader>y "+y

" use Q for formatting (gq), not Ex mode
map Q gq

" keep Select mode Q default intact
sunmap Q

" toggle paste mode
nnoremap <leader>p :call TogglePaste()<CR>

" strip trailing whitespace
nnoremap <leader>s :call StripWhitespace()<CR>

" ── Functions ────────────────────────────────────────────────
" Show paste mode in statusline
function! PasteForStatusline()
  return &paste ? " [paste] " : ""
endfunction

" Toggle paste mode with a message
function! TogglePaste()
  if(&paste == 0)
    set paste | echo "Paste Mode Enabled"
  else
    set nopaste | echo "Paste Mode Disabled"
  endif
endfunction

" Remove trailing whitespace but preserve cursor and last search
function! StripWhitespace() abort
  let save_cursor = getpos(".")
  let old_query = getreg('/')
  %s/\s\+$//e
  call setpos('.', save_cursor)
  call setreg('/', old_query)
endfunction

" ── Autocommands ─────────────────────────────────────────────
augroup vimStartup
  autocmd!
  " filetype-specific tweaks
  autocmd Filetype python   setlocal foldmethod=indent tabstop=4 shiftwidth=4 softtabstop=4
  autocmd Filetype markdown,text setlocal textwidth=78 colorcolumn=+1
  " filetype overrides
  autocmd BufNewFile,BufReadPost *.config set ft=sshconfig
  autocmd BufNewFile,BufRead vifmrc*,*.vifm set filetype=vifm

  " reload vimrc on save
  autocmd BufWritePost *vimrc* source ~/.vimrc

  " equalize split sizes
  autocmd VimResized * :wincmd =

  " restore cursor on reopen (except for commit messages)
  autocmd BufReadPost *
        \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
        \ |   exe "normal! g`\""
        \ | endif

  " Quickfix windows: auto-open after :make/grep/etc.
  " autocmd QuickFixCmdPost [^l]* cwindow               " for quickfix
  " autocmd QuickFixCmdPost l* lwindow                  " for location list
augroup END

" ── Plugins (vim-plug) ───────────────────────────────────────
" Install vim-plug if necessary
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Auto-install missing plugins on first start
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

" Plugins
call plug#begin()
Plug 'airblade/vim-gitgutter'      " Git diff signs in the gutter
Plug 'justinmk/vim-dirvish'        " minimal file explorer
Plug 'tpope/vim-commentary'        " gcc to comment lines/blocks
Plug 'tpope/vim-surround'          " cs"' etc. to change surroundings
Plug 'tpope/vim-repeat'            " make plugin mappings repeatable with dot
Plug 'tpope/vim-unimpaired'        " [q ]q etc. handy bracket mappings
Plug 'hashivim/vim-terraform'      " Terraform syntax & tools
call plug#end()
